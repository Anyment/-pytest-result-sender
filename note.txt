"""
1、配置环境


    初始化项目
        pdm init

2、编写函数
    def pytest_configure():
        # 配置加载完毕之后执行，所有测试用例执行前执行
        print(f"{datetime.now()} pytest开始执行")

    def pytest_unconfigure():
        #配置卸载完毕之后执行，所有测试用例执行后执行
        print(f"{datetime.now()} pytest结束执行")

3、添加依赖
    pdm add pytest
    执行pytest


4、打包
    pdm build

5、验证
    全新的环境中，安装插件，发现:
    1.pytest被自动安装照
    2.pytest的运行效果发生了改变

"""

"""
一、使用git进行代码的版本控制
1、创建仓库
    git init

    忽略配置:
    IDE
    python编译文件
    各种临时文件
    打包编译文件

2、回退版本
    reset --head

3、主要事项
    rescan--stage changed--sign off--commit
    为了确保代码有备份，能控制，能回退，一定要commit
"""

"""
二、使用black、isort、flake8代码质量
    1、安装依赖
        运行依赖：pdm add pytest
        开发依赖：pdm add black isort flake8 -d

    2、效果示例
        black：不妥协的代码格式化 black name.py
        isort：对import语句进行排序 isort name.py
        flake8：代码质量的分析 flake8 name.py

    3、配置脚手架
        pdm check
"""

"""
三、需求分析
1、梳理主要需求:当pytest执行结束之后，自动将结果发送到钉钉、微信、飞书、Email等处
    1.“结果”包含什么内容
        。测试开始时间
        。测试结束时间
        。测试执行时长
        。测试用例总数量
        。测试用例成功的数量
        。测试用例失败的数量
        。测试用例通过率
        。测试报告地址
        。其他。。。等等
    2.发送到“哪里”
        。钉钉:个人、群
        。微信:个人、群、公众号
        。飞书:个人、群
        。Email:个人、群组
    3.怎么发送
        。个人:加好友、发送好友消息
        。群:群机器人，调用接口
        。公众号: 关注公众，调用接口。
       。 Email:SMTP服务器发，发送
    4.“什么时候”发送
        1.每次测试结束
        2.有用例失败

2、编码思路
    伪代码
    1. hook
        。测试开始时自动执行，记录开始时间
        。测试结束时自动执行，记录结束时间，计算执行时长，发送结果
        。收集完测试用例之后自动执行，记录总的用例数量。
        。每一个用例执行结束之后自动执行，记录当前用例的结果
    2.API
        微信:添加机器人后，有接口和接口说明。
3、测试用例
    单元测试:
        测试开始时间、执行时长是否准确
        用例数量，是否准确
        用例执行结果，是否准确
        用例通过率，是否准确
        API或SMTP，是否可用
    集成测试:
        1.测试结束时，在微信群中，收到结果通知
"""

"""
四、编码实战
"""

"""
一、为插件提供配置的功能
添加配置
    1、什么时候发送
        每次都发
        有失败的时候发
    2、往什么地方发
        接口地址
    3、内容
    4、其他

识别配置

使用配置
"""

"""
二、补全测试用例
为谁编写测试用例？为pytest

1、pytest如何测试pytest
    fixture：pytester
    hook

2、为pytest编写测试用例构造运行场景
"""

'''
三、代码托管
1、创建仓库
2、本地添加远程仓库
3、推送代码push
4、CI/CD自动部署，发布插件的新版本
    1.注册PyPI账号
    2.生成PyPI token

    3.github配置token
        Github Token
'''









